
==================== FINAL INTERFACE ====================
2016-11-03 15:21:58.939879 UTC

interface main@main:Main 8001
  interface hash: 45f432d18e2bea669fac97c30dad2ab5
  ABI hash: 6a3ee864dc7c1d073343a67c927e3316
  export-list hash: c4b66312ef284257b02d78544ad7294a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ce881a2736b6cecc10ebeaa52d3e03c0
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.createConnection
  Main.getRequest
  Main.main
  Main.sendMess
module dependencies:
package dependencies: ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-448ipfN5j28Ha0AgPiJmdI
                      ansi-wl-pprint-0.6.7.3@ansi-wl-pprint-0.6.7.3-LVnipygDrAR1FEMFhjxcQX
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG
                      optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ
                      process-1.4.2.0@process-1.4.2.0
                      transformers-0.5.2.0@transformers-0.5.2.0 unix-2.7.2.0@unix-2.7.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Char8 49426525406a134b63e5a11b574dbd77
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Internal 1a31a1f30d9522329d9076dffd947c78
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket 74f40911ccc642ef529205732bba4073
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket.ByteString 5df469a3defc2172b49042eabe647e67
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket.Types a21cb2ffc6eaad6f8e6da2810c802283
import  -/  optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-LOTKI1ZYRJkF3RPPjfyooJ:Options.Applicative 031c88d485c50b485154c1052ead17f6
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
f25a163de75618063a93f33941c61691
  $wsendMess ::
    Foreign.C.Types.CInt
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Internal.ByteString #)
  {- Arity: 3, Strictness: <L,U(U)><L,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: Foreign.C.Types.CInt)
                   (w :: GHC.Base.String)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   cs :: [GHC.Types.Char] = Main.getRequest Main.main7 w
                 } in
                 case GHC.List.$wlenAcc @ GHC.Types.Char cs 0# of ww2 { DEFAULT ->
                 case Data.ByteString.Internal.$wunsafePackLenChars
                        ww2
                        cs of ww6 { Data.ByteString.Internal.PS ww7 ww8 ww9 ww10 ->
                 case Network.Socket.ByteString.$wsend
                        ww
                        ww7
                        ww8
                        ww9
                        ww10
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 Network.Socket.ByteString.$wrecv
                   (Network.Socket.Types.MkSocket
                      ww
                      Main.main6
                      Main.main5
                      Main.main4
                      Main.main3)
                   2048#
                   ipv } } }) -}
44e00e166d3e38b01e8a69cd88cfa6e3
  createConnection ::
    GHC.Base.String
    -> GHC.Types.Int -> GHC.Types.IO Network.Socket.Types.Socket
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.createConnection1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Network.Socket.Types.Socket>_R)) -}
123c5683437caecc0ff5b888983d54e2
  createConnection1 ::
    GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Network.Socket.Types.Socket #)
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><S,U>,
     Unfolding: (\ (h :: GHC.Base.String)
                   (p :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.Socket.getAddrInfo1
                        (GHC.Base.Nothing @ Network.Socket.AddrInfo)
                        (GHC.Base.Just @ GHC.Base.String h)
                        (GHC.Base.Just @ GHC.Base.String (GHC.Show.$fShowInt_$cshow p))
                        s of ds1 { (#,#) ipv ipv1 ->
                 Main.createConnection2 ipv1 ipv }) -}
3448b951bf7f3fb5c8b802f133758f66
  createConnection2 ::
    [Network.Socket.AddrInfo]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Network.Socket.Types.Socket #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (ds :: [Network.Socket.AddrInfo])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild {
                   []
                   -> GHC.IO.failIO1
                        @ Network.Socket.Types.Socket
                        Main.createConnection3
                        eta
                   : addrInfo ds1
                   -> case Network.Socket.$wsocket
                             (Network.Socket.addrFamily addrInfo)
                             Network.Socket.Types.Stream
                             0#
                             eta of ds2 { (#,#) ipv ipv1 ->
                      case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                      case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                      case Network.Socket.$wconnect
                             ww1
                             ww7
                             (Network.Socket.addrAddress addrInfo)
                             ipv of ds3 { (#,#) ipv2 ipv3 ->
                      (# ipv2, ww #) } } } } }) -}
d0d514bf015d2dd9bec289e690a521bf
  createConnection3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Pattern match failure in do expression at src/Main.hs:22:9-20"#) -}
ff746a02b9d59078e8c8ecdd580b1b85
  getRequest :: GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ (p :: GHC.Base.String) (s :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   "GET /echo.php?"#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      p
                      (GHC.CString.unpackAppendCString#
                         "="#
                         (GHC.Base.++ @ GHC.Types.Char s Main.getRequest1)))) -}
cd17f3601cd41350d7afea47a568d763
  getRequest1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   " HTTP/1.1\r\n\
                   \\r\n"#) -}
38dff9634b2fc817cb537e6119429720
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
f9d229a2437697310e6a37fce9b2c438
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main11
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main10
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main9
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case Network.Socket.getAddrInfo1
                        (GHC.Base.Nothing @ Network.Socket.AddrInfo)
                        (GHC.Base.Just @ GHC.Base.String ipv3)
                        (GHC.Base.Just
                           @ GHC.Base.String
                           (case Text.Read.readEither6
                                   @ GHC.Types.Int
                                   (Text.ParserCombinators.ReadP.run
                                      @ GHC.Types.Int
                                      Main.main8
                                      ipv7) of wild {
                              []
                              -> case GHC.Err.error
                                        @ 'GHC.Types.PtrRepLifted
                                        @ GHC.Types.Int
                                        GHC.Err.errorWithoutStackTrace_wild1
                                          `cast`
                                        (Sym (GHC.Classes.N:IP[0]
                                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                        Text.Read.readEither4
                                 ret_ty GHC.Base.String
                                 of {}
                              : x ds
                              -> case ds of wild1 {
                                   []
                                   -> case x of ww2 { GHC.Types.I# ww3 ->
                                      case GHC.Show.$wshowSignedInt
                                             0#
                                             ww3
                                             (GHC.Types.[]
                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                      GHC.Types.: @ GHC.Types.Char ww5 ww6 } }
                                   : ipv12 ipv13
                                   -> case GHC.Err.error
                                             @ 'GHC.Types.PtrRepLifted
                                             @ GHC.Types.Int
                                             GHC.Err.errorWithoutStackTrace_wild1
                                               `cast`
                                             (Sym (GHC.Classes.N:IP[0]
                                                       <"callStack">_N
                                                       <GHC.Stack.Types.CallStack>_N))
                                             Text.Read.readEither2
                                      ret_ty GHC.Base.String
                                      of {} } }))
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case Main.createConnection2
                        ipv13
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 case ipv15 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case Main.$wsendMess ww1 ipv11 ipv14 of ds9 { (#,#) ipv16 ipv17 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main2
                        GHC.Types.True
                        ipv16 of ds10 { (#,#) ipv18 ipv19 ->
                 Data.ByteString.Char8.hPutStrLn1
                   GHC.IO.Handle.FD.stdout
                   ipv17
                   ipv18 } } } } } } } } } } }) -}
d8735560b195817675c8cf8d0469d3b5
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Server Port:"#) -}
2871e62a575b7ff0bc394ee203a21b76
  main11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Server IP:"#) -}
dfb5663f21a628c9db223ba74515b55d
  main12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
71c58a64d5b3d9c6f49325e2743f944d
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Returned:"#) -}
c2e8e2f1fc1c1938361f797490139e75
  main3 :: GHC.MVar.MVar Network.Socket.Types.SocketStatus
  {- Strictness: x -}
fc93096644a7257208a01cea2d737cb9
  main4 :: Network.Socket.Types.ProtocolNumber
  {- Strictness: x -}
eed3cfa737e255d6c8c929de0376f094
  main5 :: Network.Socket.Types.SocketType
  {- Strictness: x -}
c82a3cdb4193c8725b70d868b50383c5
  main6 :: Network.Socket.Types.Family
  {- Strictness: x -}
c7214208c089c84b62bd4370328f63e3
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "message"#) -}
5dbdf677228c7b01cb66db7210c9e050
  main8 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: ((GHC.Read.$fReadInt3
                    GHC.Read.$fReadInt_$sconvertInt
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <GHC.Types.Int>_R)
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
29cf68cd90f30cbc8dfd5e54812bf366
  main9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Message:"#) -}
68cdc7f82c261c6564b63049c3072da5
  sendMess ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.Types.IO Data.ByteString.Internal.ByteString
  {- Arity: 3, Strictness: <S,1*U(U(U),A,A,A,A)><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sendMess1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.ByteString.Internal.ByteString>_R)) -}
175cd6043a8ed8cee5ff9f09e68ca586
  sendMess1 ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Internal.ByteString #)
  {- Arity: 3, Strictness: <S,1*U(U(U),A,A,A,A)><L,1*U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 Main.$wsendMess ww1 w1 w2 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

